
@page "/Login"

<EditForm Model="loginModel" OnValidSubmit="@ValidateUser">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:red">ToDo Login</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="loginModel.Username" placeholder="Username" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="loginModel.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
        <a href="/signup" class="col-3">Sign up</a>
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        @responseBody
    </div>
</EditForm>

@code {

    private LoginUserModel loginModel { get; set;} = new();
    string responseBody = string.Empty;
    private IAccountManagementService _account;

    protected override Task OnInitializedAsync()
    {
        //user = new Models.User();
        return base.OnInitializedAsync();
    }

    private async Task  ValidateUser()
    {
        await _account.LoginAsync<Task>("https://localhost:44325/api/Account/Login", loginModel);

        //try
        //{
        //    string serializedUser = JsonConvert.SerializeObject(loginModel);


        //    HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
        //    httpRequestMessage.Method = new HttpMethod("POST");
        //    httpRequestMessage.RequestUri = new Uri("./Account/Login");
        //    httpRequestMessage.Content = new StringContent(serializedUser);
        //    httpRequestMessage.Content.Headers.ContentType
        //        = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        //    var response = await Http.SendAsync(httpRequestMessage);
        //    response.EnsureSuccessStatusCode();
        //    responseBody = await response.Content.ReadAsStringAsync();

        //}
        //catch (Exception)
        //{

        //    responseBody = "smothing went wrong !";
        //}
        //finally
        //{
        //    this.StateHasChanged();
        //}



    }
}